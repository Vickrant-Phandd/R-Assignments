#1.	Build a bar-plot for the ‘PhoneService’ column
ggplot(data = customer_churn, aes(x=PhoneService))+geom_bar(fill="Pink", col="peru")
#Questions on geom_bar():
#1.	Build a bar-plot for the ‘PhoneService’ column
#a.	Assign the fill color to be ‘pink’
#b.	Assign the boundary color to be ‘peru’
ggplot(data = customer_churn, aes(x=PhoneService))+geom_bar(fill="Pink", col="peru")
ggplot(data = customer_churn, aes(x=PhoneService, fill=PhoneService))+geom_bar()
#Questions on geom_bar():
#1.	Build a bar-plot for the ‘PhoneService’ column
#a.	Assign the fill color to be ‘pink’
#b.	Assign the boundary color to be ‘peru’
ggplot(data = customer_churn, aes(x=PhoneService))+geom_bar(fill="Pink", col="peru")
ggplot(data = customer_churn, aes(x=PhoneService, fill=PhoneService))+geom_bar()
#Questions on geom_bar():
#1.	Build a bar-plot for the ‘PhoneService’ column
#a.	Assign the fill color to be ‘pink’
#b.	Assign the boundary color to be ‘peru’
ggplot(data = customer_churn, aes(x=PhoneService))+geom_bar(fill="Pink", col="peru")
#2.	Build a bar-plot for the ’InternetService’ column
#a.	Assign ‘InternetService’ to the fill aesthetic
##if we give fill in aes then column name you have to use
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService, ))
#2.	Build a bar-plot for the ’InternetService’ column
#a.	Assign ‘InternetService’ to the fill aesthetic
##if we give fill in aes then column name you have to use
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService, ))+geom_bar()
#2.	Build a bar-plot for the ’InternetService’ column
#a.	Assign ‘InternetService’ to the fill aesthetic
##if we give fill in aes then column name you have to use
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService))+geom_bar()
#b.	Assign ‘Contract’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+geom_bar()
#Questions on geom_bar():
#1.	Build a bar-plot for the ‘PhoneService’ column
#a.	Assign the fill color to be ‘pink’
#b.	Assign the boundary color to be ‘peru’
ggplot(data = customer_churn, aes(x=PhoneService))+geom_bar(fill="Pink", col="peru")
#2.	Build a bar-plot for the ’InternetService’ column
#a.	Assign ‘InternetService’ to the fill aesthetic
##if we give fill in aes then column name you have to use
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService))+geom_bar()
#b.	Assign ‘Contract’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+geom_bar()
#c.	Change the position of bars to ‘identity’
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService))+
geom_bar(position = "identity")
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService))+
geom_bar(position = "identity")
#c.	Change the position of bars to ‘identity’
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "identity")
#c.	Change the position of bars to ‘identity’
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "identity")
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "dodge")
#c.	Change the position of bars to ‘identity’
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "identity")
#b.	Assign ‘Contract’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+geom_bar()
#2.	Build a bar-plot for the ’InternetService’ column
#a.	Assign ‘InternetService’ to the fill aesthetic
##if we give fill in aes then column name you have to use
ggplot(data = customer_churn, aes(x=InternetService, fill=InternetService))+geom_bar()
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "dodge")
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "stack")
#b.	Assign ‘Contract’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+geom_bar()
#3.	Build a bar-plot for ‘TechSupport’ column
#a.	Assign ‘Churn’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=TechSupport, fill=Churn)+geom_bar()
#stack is default#
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "stack")
#dodge#
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "dodge")
#stack is default#
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "stack")
#3.	Build a bar-plot for ‘TechSupport’ column
#stack is default#
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "stack")
#3.	Build a bar-plot for ‘TechSupport’ column
#3.	Build a bar-plot for ‘TechSupport’ column
#a.	Assign ‘Churn’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=TechSupport, fill=Churn)+geom_bar()
ggplot(data = customer_churn, aes(x=TechSupport, fill=Churn)+
geom_bar()
ggplot(data = customer_churn, aes(x=TechSupport, fill=Churn)+
geom_bar()
#3.	Build a bar-plot for ‘TechSupport’ column
#a.	Assign ‘Churn’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=TechSupport, fill=Churn))+
geom_bar(position = "dodge")
#dodge#
ggplot(data = customer_churn, aes(x=InternetService, fill=Contract))+
geom_bar(position = "dodge")
ggplot(customer_churn, aes(x=TechSupport, fill=Churn))+
geom_bar(position = "dodge")
#Questions on geom_histogram():
#1.	Build a histogram for the ‘tenure’ column
ggplot(customer_churn, aes(x=tenure, fill=tenure))+
geom_bar(position = "dodge")
#Questions on geom_histogram():
#1.	Build a histogram for the ‘tenure’ column
ggplot(customer_churn, aes(x=tenure))+
geom_bar(position = "dodge")
ggplot(customer_churn, aes(x=tenure))+
geom_bar(position = "dodge")
#a.	Assign the fill color to be ‘mediumspringgreen’
ggplot(customer_churn, aes(x=tenure, fill=mediumspringgreen ))+
geom_bar(position = "dodge")
#a.	Assign the fill color to be ‘mediumspringgreen’
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = mediumspringgreen, position = "dodge")
#a.	Assign the fill color to be ‘mediumspringgreen’
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", position = "dodge")
View(customer_churn)
#b.	Assign the boundary color to be ‘azure’
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col("azure") position = "dodge")
#b.	Assign the boundary color to be ‘azure’
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col="azure", position = "dodge")
#c.	Change the number of bins to be 100
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col="azure",bins="100" position = "dodge")
#c.	Change the number of bins to be 100
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col="azure",bins="100")
#c.	Change the number of bins to be 100
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col="azure",bins="10")
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col="azure",bins="10")
#c.	Change the number of bins to be 100
ggplot(customer_churn, aes(x=tenure))+
geom_bar(fill = "mediumspringgreen", col="azure",bins="5")
#c.	Change the number of bins to be 100
ggplot(customer_churn, aes(x=tenure))+
geom_histogram(fill = "mediumspringgreen", col="azure",bins="5")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill="PaymentMethod"))+
geom_histogram(fill = "mediumspringgreen", col="azure",bins="5")
ggplot(customer_churn, aes(x=MonthlyCharges, fill="PaymentMethod"))
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill="PaymentMethod"))+
geom_histogram(col="azure",bins="5")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill="PaymentMethod"))+
geom_histogram(col="azure",bins="50")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill="PaymentMethod"))+
geom_histogram(col="azure",bins="50",position = "dodge")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill="PaymentMethod"))+
geom_histogram(position = "dodge")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill="Churn"))+
geom_histogram(position = "dodge")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(data=customer_churn, aes(x=MonthlyCharges, fill="Churn"))+
geom_histogram(position = "dodge")
library(ggplot2)
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(data=customer_churn, aes(x=MonthlyCharges, fill="Churn"))+
geom_histogram(position = "dodge")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(data=customer_churn, aes(x=MonthlyCharges, fill="Churn"))+
geom_histogram()
ggplot(data=customer_churn, aes(x=MonthlyCharges, fill="Churn"))+
geom_histogram()
ggplot(data = customer_churn, aes(x=MonthlyCharges, fill=Churn))+
geom_histogram()
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=MonthlyCharges, fill=Churn))+
geom_histogram(position = "dodge")
#b.	Assign ‘OnlineBackup’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=MonthlyCharges, fill=OnlineBackup))+
geom_histogram(position = "dodge")
plot(customer_churn$Dependents)
#b.	Assign ‘OnlineBackup’ to the fill aesthetic
ggplot(customer_churn, aes(x=MonthlyCharges, fill=OnlineBackup))+
geom_histogram(position = "dodge")
ggplot(customer_churn,aes(TotalCharges, fill=gender))+
geom_histogram(position = "dodge")
#b.	Assign ‘InternetService’ to the fill aesthetic
ggplot(customer_churn,aes(TotalCharges, fill=InternetService))+
geom_histogram(position = "dodge")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=MonthlyCharges, fill=Churn))+
geom_histogram(position = "dodge")
#2.	Build histogram for the ‘MonthlyCharges’ column
#a.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(data = customer_churn, aes(x=MonthlyCharges, fill=PaymentMethod))+
geom_histogram(position = "dodge")
#3.	Build histogram for the ‘TotalCharges’ column
#a.	Assign ‘gender’ to the fill aesthetic
ggplot(customer_churn,aes(TotalCharges, fill=gender))+
geom_histogram(position = "dodge")
ggplot(customer_churn,aes(y=TotalCharges, x=tenure))+
geom_point(col=wheat3)
#Questions on geom_point():
#1.	Build a scatter-plot between ‘TotalCharges’ & ‘tenure’. Map ‘TotalCharges’ to the y-axis & ‘tenure’ to the ‘x-axis’
#a.	Assign it the color ‘wheat3’
ggplot(customer_churn,aes(y=TotalCharges, x=tenure))+
geom_point(col="wheat3")
ggplot(customer_churn,aes(y=TotalCharges, x=tenure, col=PaymentMethod))+
geom_point()
#c.	Use ‘col’ as an aesthetic and Map ‘gender’ to col
ggplot(customer_churn,aes(y=TotalCharges, x=tenure, col=gender))+
geom_point()
#d.	Map ‘Dependents’ to both ‘col’ & ‘shape’ aesthetics
ggplot(customer_churn,aes(y=TotalCharges, x=tenure, col=Dependents, shape=PaymentMethod))+
geom_point()
#d.	Map ‘Dependents’ to both ‘col’ & ‘shape’ aesthetics
ggplot(customer_churn,aes(y=TotalCharges, x=tenure, col=Dependents, shape=Dependents))+
geom_point()
ggplot(customer_churn,aes(y=tenure, x=MonthlyCharges))+
geom_point(col="yellowgreen")
#b.	Use ‘col’ as an aesthetic and Map ‘InternetService’ to col
ggplot(customer_churn,aes(y=tenure, x=MonthlyCharges, col=InternetService))+
geom_point()
#c.	Use ‘col’ as an aesthetic and Map ‘Contract’ to col
ggplot(customer_churn,aes(y=tenure, x=MonthlyCharges, col=Contract))+
geom_point()
##############################geom_boxplot##############################################################
#Questions on geom_boxplot:
#1.	Build a box-plot between ‘tenure’ & ‘Partner’. Map ‘tenure’ to the y-axis & ‘Partner’ to the ‘x-axis’
#a.	Assign it a fill color of ‘violet’
ggplot(customer_churn,aes(y=tenure, x=Partner))+geom_point(col="violet")
##############################geom_boxplot##############################################################
#Questions on geom_boxplot:
#1.	Build a box-plot between ‘tenure’ & ‘Partner’. Map ‘tenure’ to the y-axis & ‘Partner’ to the ‘x-axis’
#a.	Assign it a fill color of ‘violet’
ggplot(customer_churn,aes(y=tenure, x=Partner))+geom_boxplot(col="violet")
##############################geom_boxplot##############################################################
#Questions on geom_boxplot:
#1.	Build a box-plot between ‘tenure’ & ‘Partner’. Map ‘tenure’ to the y-axis & ‘Partner’ to the ‘x-axis’
#a.	Assign it a fill color of ‘violet’
ggplot(customer_churn,aes(y=tenure, x=Partner))+geom_boxplot(fill="violet")
#b.	Assign it a boundary color of ‘snow3’
ggplot(customer_churn,aes(y=tenure, x=Partner))+geom_boxplot(fill="violet", col="snow3")
#2.	Build a box-plot between ‘tenure’ & ‘MultipleLines’. Map ‘tenure’ to the y-axis & ‘MultipleLines’ to the ‘x-axis’
#a.	Assign ‘Partner’ to the fill aesthetic
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=Patner))+geom_boxplot()
#2.	Build a box-plot between ‘tenure’ & ‘MultipleLines’. Map ‘tenure’ to the y-axis & ‘MultipleLines’ to the ‘x-axis’
#a.	Assign ‘Partner’ to the fill aesthetic
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=Partner))+geom_boxplot()
#b.	Assign ‘PhoneService’ to the fill aesthetic
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=PhoneService))+geom_boxplot()
#3.	Build a box-plot between ‘tenure’ & ‘Contract’
#a.	Assign ‘InternetService’ to the fill aesthetic
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=InternetService))+geom_boxplot()
#b.	Assign ‘PaymentMethod’ to the fill aesthetic
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=PaymentMethod))+geom_boxplot()
################################facet_grid#########################################################
#Questions on facet_grid():
#1.	Build a box-plot between ‘tenure’ & ‘MultipleLines’. Map ‘tenure’ on the y-axis & ‘MultipleLines’ on the x-axis. Map ‘InternetService’ to the fill aesthetic
#a.	Facet the plot w.r.t ‘InternetService’ column
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=InternetService))+geom_boxplot(facet_grid("InternetService"))
####################################plotly#####################################
install.packages("plotly")
library(plotly)
plotly(customer_churn, x=~MonthlyCharges, y=~tenure, color = ~Dependents)
library(plotly)
plotly(customer_churn, x=~MonthlyCharges, y=~tenure, color = ~Dependents)
plotly(customer_churn, x=~MonthlyCharges, y=~tenure, color = ~Dependents, type="scatter")
plot_ly(customer_churn, x=~MonthlyCharges, y=~tenure, color = ~Dependents, type="scatter")
#base
plot(customer_churn$Dependents)
##################22/07/2020###################3
#data visualization#
library(dplyr)
library(ggplot2)
#base
plot(customer_churn$Dependents)
plot(customer_churn$Dependents, col="coral")
plot(customer_churn$Dependents, col="coral",xlab="Dependents",ylab="Frequency",main="Dependents Plot")
#base
plot(customer_churn$Dependents)
read.csv("E:/Intellipaat/Assignments/customer_churn.csv") -> customer_churn
#base
plot(customer_churn$Dependents)
#------
plot(customer_churn$PhoneService)
plot(customer_churn$PhoneService,col="aquamarine4")
plot(customer_churn$PhoneService,col="aquamarine4",
xlab="Phone Service",
ylab="Frequency",
main="Distribution of PhoneService")
#--------
read.csv("customer_churn.csv")->customer_churn.csv
install.packages("ggplot2")
install.packages("ggplot2")
plot(customer_churn$Contract)
plot(customer_churn$Contract)
ggplot(data = customer_churn, aes(x=tenure))
ggplot(data = customer_churn, aes(x=tenure)) +
geom_histogram(bins=20,fill="steelblue3",col="black",alpha=0.5)
ggplot(data = customer_churn, aes(x=tenure)) +
geom_histogram(bins=20,fill="steelblue3",col="black",alpha=2) +
ggplot(data = customer_churn, aes(x=tenure)) +
geom_histogram(bins=20,fill="steelblue3",col="black",alpha=0.5) +
stat_bin(bins=20, geom="text", color="black", aes(label=..count..), vjust = -1.1) +
ggplot(data = customer_churn, aes(x=tenure)) +
geom_histogram(bins=20,fill="steelblue3",col="black",alpha=0.5) +
stat_bin(bins=20, geom="text", color="black", aes(label=..count..), vjust = -1.1) +
labs(title = "Tenure Distribution", x="Tenure",y="Frequency") +
theme(plot.title = element_text(hjust=0.5))
################################facet_grid#########################################################
#Questions on facet_grid():
#1.	Build a box-plot between ‘tenure’ & ‘MultipleLines’. Map ‘tenure’ on the y-axis & ‘MultipleLines’ on the x-axis. Map ‘InternetService’ to the fill aesthetic
#a.	Facet the plot w.r.t ‘InternetService’ column
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=InternetService))+geom_boxplot()+facet_grid("InternetService")
################################facet_grid#########################################################
#Questions on facet_grid():
#1.	Build a box-plot between ‘tenure’ & ‘MultipleLines’. Map ‘tenure’ on the y-axis & ‘MultipleLines’ on the x-axis. Map ‘InternetService’ to the fill aesthetic
#a.	Facet the plot w.r.t ‘InternetService’ column
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=InternetService))+geom_boxplot()+facet_grid(~InternetService)
################################facet_grid#########################################################
#Questions on facet_grid():
#1.	Build a box-plot between ‘tenure’ & ‘MultipleLines’. Map ‘tenure’ on the y-axis & ‘MultipleLines’ on the x-axis. Map ‘InternetService’ to the fill aesthetic
#a.	Facet the plot w.r.t ‘InternetService’ column
ggplot(customer_churn,aes(y=tenure, x=MultipleLines, fill=InternetService))+geom_boxplot()+facet_grid(~InternetService)
ggplot(customer_churn,aes(y=TotalCharges, x=tenure, col=Contract))+
geom_point()+facet_grid(~Contract)
#3.	Build a histogram for the ‘MonthlyCharges’ column. Map ‘PaymentMethod’ onto fill aesthetic.
#a.	Facet the plot w.r.t ‘PaymentMethod’ column
ggplot(customer_churn,aes(x=MonthlyCharges, fill=PaymentMethod))+
geom_histogram()+facet_grid(~PaymentMethod)
#3.	Build a histogram for the ‘MonthlyCharges’ column. Map ‘PaymentMethod’ onto fill aesthetic.
#a.	Facet the plot w.r.t ‘PaymentMethod’ column
ggplot(customer_churn,aes(x=MonthlyCharges, fill=PaymentMethod))+
geom_histogram()
#3.	Build a histogram for the ‘MonthlyCharges’ column. Map ‘PaymentMethod’ onto fill aesthetic.
#a.	Facet the plot w.r.t ‘PaymentMethod’ column
ggplot(customer_churn,aes(x=MonthlyCharges, fill=PaymentMethod))+
geom_histogram()+facet_grid(~PaymentMethod)
#####################################theme() layer#############################################################
#Questions on theme() layer:
#1.	Build a bar-plot for the ‘gender’ column. Give it a fill color of ‘blue4’
#a.	Give the panel a background color of ‘chartreuse4’
ggplot(data = customer_churn, aes(x=gender))+
geom_bar(fill="blue4")+theme(panel.background = element_rect(fill="chartreuse4") )
#b.	Give the plot a background color of ‘cornsilk4’
ggplot(data = customer_churn, aes(x=gender))+
geom_bar(fill="blue4")+theme(panel.background = element_rect(fill="cornsilk4") )
getwd()
setwd("E:/Intellipaat/Assignments")
read.csv('E:/Intellipaat/Assignments/customer_churn.csv')->customer_churn
read.csv('E:/Intellipaat/Assignments/customer_churn.csv')->customer_churn
read.csv('E:/Intellipaat/Assignments/census-income.csv')->census-income
read.csv('E:/Intellipaat/Assignments/census_income.csv')->census_income
read.csv('E:/Intellipaat/Assignments/census_income.csv')->census_income
view(census_income)
View(census_income)
read.csv('E:/Intellipaat/Assignments/census_income.csv',stringsAsFactors = T)->census_income
View(census_income)
str(census_income)
read.csv('E:/Intellipaat/Assignments/census_income.csv')->census_income
str(census_income)
read.csv('E:/Intellipaat/Assignments/census_income.csv', ,stringsAsFactors = T)->census_income
str(census_income)
read.csv('E:/Intellipaat/Assignments/census_income.csv', ,stringsAsFactors = T)->censusdata
read.csv('E:/Intellipaat/Assignments/census_income.csv', ,stringsAsFactors = T)->censusdata
str(censusdata)
#Data Preprocessing
table(is.na(censusdata))
sum(is.na(censusdata))
colSums(is.na(censusdata))
censusdata[censusdata==?]=NA
censusdata[censusdata==?]->NA
censusdata[censusdata=="?"]->NA
censusdata[censusdata=="?"]=NA
censusdata[censusdata==" ?"]=NA
View(censusdata)
table(is.na(censusdata))
sum(is.na(censusdata))
colSums(is.na(censusdata))
#b.Remove all the rows that contain NA values.
censusdata=na.omit(censusdata)
#b.Remove all the rows that contain NA values.
censusdata=na.omit(censusdata)
table(is.na(censusdata))
sum(is.na(censusdata))
colSums(is.na(censusdata))
#1.Data science project#
getwd()
setwd("E:/Intellipaat/R/Assignments")
read.csv('E:/Intellipaat/R/Assignments/census_income.csv', ,stringsAsFactors = T)->censusdata
str(censusdata)
View(censusdata)
#1.Data Preprocessing
#a.Replace all missing value with NA
table(is.na(censusdata))
sum(is.na(censusdata))
colSums(is.na(censusdata))
#space and ?
censusdata[censusdata==" ?"]=NA
View(censusdata)
table(is.na(censusdata))
sum(is.na(censusdata))
colSums(is.na(censusdata))
#b.Remove all the rows that contain NA values.
censusdata=na.omit(censusdata)
table(is.na(censusdata))
sum(is.na(censusdata))
colSums(is.na(censusdata))
#c. Remove all the white space from the colums
#install.packages("stringr")
library(stringr)
library(dplyr)
str(censusdata)
censusdata$workclass=as.character(censusdata$workclass)
censusdata$education=as.character(censusdata$education)
censusdata$marital.status=as.character(censusdata$marital.status)
censusdata$occupation=as.character(censusdata$occupation)
censusdata$relationship=as.character(censusdata$relationship)
censusdata$race=as.character(censusdata$race)
censusdata$sex=as.character(censusdata$sex)
censusdata$native.country=as.character(censusdata$native.country)
censusdata$X=as.character(censusdata$X)
censusdata<-censusdata %>% mutate_if(is.character, str_trim)
#OR
censusdata=mutate_if(censusdata, is.character, str_trim)
str(censusdata)
#2.	Data Manipulation:
#Questions:
#a)	Extract the "education" column and store it in "census_ed" .
census_ed=censusdata$education
#OR
census_ed1=select(censusdata, education)
View(census_ed)
View(census_ed1)
#b)	Extract all the columns from "age" to "relationship" and store it in "census_seq".
census_seq1<-censusdata%>%select(age:relationship)
View(census_seq1)
#OR with Dplyr package
census_seq=select(censusdata, age:relationship)
View(census_seq)
#5.	Logistic Regression:
#a)	Build a simple logistic regression model as follows:
#i)	Divide the dataset into training and test sets in 65:35 ratio.
set.seed(2)
#convert Dependent and Independent variable into Factor type
censusdata$X<-as.factor(censusdata$X)
censusdata$occupation<-as.factor(censusdata$occupation)
sample.split(censusdata$X, SplitRatio =0.65)->splitdata
library(caTools)
#5.	Logistic Regression:
#a)	Build a simple logistic regression model as follows:
#i)	Divide the dataset into training and test sets in 65:35 ratio.
set.seed(2)
#convert Dependent and Independent variable into Factor type
censusdata$X<-as.factor(censusdata$X)
censusdata$occupation<-as.factor(censusdata$occupation)
sample.split(censusdata$X, SplitRatio =0.65)->splitdata
View(splitdata)
subset(censusdata, splitdata==T)->train
subset(censusdata, splitdata==F)->test
View(train)
View(test)
#ii)	Build a logistic regression model where the dependent variable is "X"(yearly income) and independent variable is "occupation".
glm(X~occupation, data=train, family="binomial")->glm_model
#iii)	Predict the values on the test set.
predict(glm_model, newdata=test, type = "response")->predicted_value1
head(predicted_value1)
View(predicted_value1)
range(predicted_value1)
#iv)Plot accuracy vs cut-off and pick an ideal value for cut-off.
#install.packages("ROCR")
library(ROCR)
prediction(predicted_value1, test$X)->pred_log_roc
pred_log_roc
performance(pred_log_roc, "acc")->acc
plot(acc) ##check for which value accuracy get constant
ifelse(predicted_value1>0.47,">50k","<=50k")->lm.pred
#v)Build a confusion matrix and find the accuracy.
tab<-table(lm.pred, test$X)
tab
#Accuracy formula (TN+TP)/(TN+TP+FP+FN)
#(7214+678)/(7214+678+1950+715)
#diag is diagonal value in tab
accuracy<-sum(diag(tab))/sum(tab)
#accuracy we got 0.7475609
accuracy
#vi)Plot the ROC curve and find the auc(Area Under Curve).
roc_curve<-performance(pred_log_roc, "tpr", "fpr")
plot(roc_curve)
plot(roc_curve)
auc<-performance(pred_log_roc, "auc")
auc<-auc@y.values[[1]]
auc
